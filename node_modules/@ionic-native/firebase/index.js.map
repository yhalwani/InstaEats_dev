{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/firebase/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Plugin, Cordova } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n/**\r\n * @name Firebase\r\n * @description\r\n * This plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported (including iOS 10).\r\n *\r\n * @usage\r\n * ```\r\n * import { Firebase } from '@ionic-native/firebase';\r\n *\r\n * constructor(private firebase: Firebase) { }\r\n *\r\n * ...\r\n *\r\n * this.firebase.getToken()\r\n *   .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device\r\n *   .catch(error => console.error('Error getting token', error));\r\n *\r\n * this.firebase.onTokenRefresh()\r\n *   .subscribe((token: string) => console.log(`Got a new token ${token}`));\r\n *\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'Firebase',\r\n  plugin: 'cordova-plugin-firebase',\r\n  pluginRef: 'FirebasePlugin',\r\n  repo: 'https://github.com/arnesson/cordova-plugin-firebase',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class Firebase {\r\n\r\n  /**\r\n   * Get the device token\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getToken(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get notified when a token is refreshed\r\n   * @return {Observable<any>}\r\n   */\r\n  @Cordova({\r\n    observable: true\r\n  })\r\n  onTokenRefresh(): Observable<any> { return; }\r\n\r\n  /**\r\n   * Get notified when the user opens a notification\r\n   * @return {Observable<any>}\r\n   */\r\n  @Cordova({\r\n    observable: true\r\n  })\r\n  onNotificationOpen(): Observable<any> { return; }\r\n\r\n  /**\r\n   * Grant permission to recieve push notifications\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  grantPermission(): Promise<any> { return; }\r\n\r\n    /**\r\n   * Check permission to recieve push notifications\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  hasPermission(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set icon badge number. Set to 0 to clear the badge.\r\n   * @param badgeNumber {number}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setBadgeNumber(badgeNumber: number): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get icon badge number\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getBadgeNumber(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Subscribe to a topic\r\n   * @param topic {string}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  subscribe(topic: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Unsubscribe from a topic\r\n   * @param topic {string}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  unsubscribe(topic: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Log an event using Analytics\r\n   * @param type {string}\r\n   * @param data {Object}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  logEvent(type: string, data: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set the name of the current screen in Analytics\r\n   * @param name {string} Screen name\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setScreenName(name: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set a user id for use in Analytics\r\n   * @param userId {string}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setUserId(userId: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set a user property for use in Analytics\r\n   * @param name {string}\r\n   * @param value {string}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setUserProperty(name: string, value: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Fetch Remote Config parameter values for your app\r\n   * @param cacheExpirationSeconds\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android'],\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  fetch(cacheExpirationSeconds?: number): Promise<any> { return; }\r\n\r\n  /**\r\n   * Activate the Remote Config fetched config\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  activateFetched(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Retrieve a Remote Config value\r\n   * @param key {string}\r\n   * @param namespace {string}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android'],\r\n    successIndex: 2,\r\n    errorIndex: 3\r\n  })\r\n  getValue(key: string, namespace?: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Retrieve a Remote Config byte array\r\n   * @param key {string}\r\n   * @param namespace {string}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android'],\r\n    successIndex: 2,\r\n    errorIndex: 3\r\n  })\r\n  getByteArray(key: string, namespace?: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get the current state of the FirebaseRemoteConfig singleton object\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  getInfo(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Change the settings for the FirebaseRemoteConfig object's operations\r\n   * @param settings {Object}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  setConfigSettings(settings: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set defaults in the Remote Config\r\n   * @param defaults {Object}\r\n   * @param namespace {string}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android'],\r\n    successIndex: 2,\r\n    errorIndex: 3\r\n  })\r\n  setDefaults(defaults: any, namespace: string): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}